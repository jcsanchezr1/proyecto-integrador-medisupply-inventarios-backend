{
	"info": {
		"_postman_id": "c518d6bc-dafc-4e58-b33c-be816af431c1",
		"name": "MediSupply Inventory API - Con Datos Aleatorios",
		"description": "Colección para validar el servicio de inventarios MediSupply con datos aleatorios generados automáticamente",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2750860",
		"_collection_link": "https://timecontrol.postman.co/workspace/TCT~e4bf613c-84ca-4624-ad9c-4c8c0259e211/collection/2750860-c518d6bc-dafc-4e58-b33c-be816af431c1?action=share&source=collection_link&creator=2750860"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea 'pong'",
							"pm.test('Response is pong', function () {",
							"    const responseText = pm.response.text().trim();",
							"    pm.expect(responseText).to.eql('\"pong\"');",
							"});",
							"",
							"console.log('Validaciones completadas para health check');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/ping",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Token Admin - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar respuesta exitosa de autenticación",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('access_token');",
							"    pm.expect(responseJson.access_token).to.be.a('string');",
							"    pm.expect(responseJson.access_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response has token_type\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('token_type');",
							"    pm.expect(responseJson.token_type).to.eql('Bearer');",
							"});",
							"",
							"pm.test(\"Response has expires_in\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('expires_in');",
							"    pm.expect(responseJson.expires_in).to.be.a('number');",
							"    pm.expect(responseJson.expires_in).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Response has refresh_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('refresh_token');",
							"    pm.expect(responseJson.refresh_token).to.be.a('string');",
							"    pm.expect(responseJson.refresh_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Guardar tokens para uso posterior",
							"const responseJson = pm.response.json();",
							"if (responseJson && responseJson.access_token) {",
							"    pm.globals.set('auth_token', responseJson.access_token);",
							"    console.log('Token de autenticación guardado');",
							"}",
							"",
							"// Guardar refresh_token para logout",
							"if (responseJson && responseJson.refresh_token) {",
							"    pm.globals.set('refresh_token', responseJson.refresh_token);",
							"    console.log('Refresh token guardado para logout');",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": \"medisupply05@gmail.com\",\n    \"password\": \"Admin123456\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/auth/token",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Autentica un usuario admin usando las credenciales creadas anteriormente"
			},
			"response": []
		},
		{
			"name": "Crear Producto - Datos Válidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el producto",
							"const skuNumber = Math.floor(Math.random() * 9000) + 1000;",
							"const sku = `MED-${skuNumber}`;",
							"",
							"const nombres = [",
							"    'Paracetamol 500mg',",
							"    'Ibuprofeno 400mg',",
							"    'Aspirina 100mg',",
							"    'Omeprazol 20mg',",
							"    'Amoxicilina 500mg',",
							"    'Metformina 850mg',",
							"    'Losartan 50mg',",
							"    'Atorvastatina 20mg',",
							"    'Levotiroxina 50mcg',",
							"    'Metoprolol 50mg'",
							"];",
							"",
							"const tipos = ['Alto valor', 'Seguridad', 'Cadena fría'];",
							"const ubicaciones = ['A-01-01', 'A-01-02', 'A-02-01', 'B-01-01', 'B-02-01', 'C-01-01'];",
							"",
							"const nombre = nombres[Math.floor(Math.random() * nombres.length)];",
							"const tipo = tipos[Math.floor(Math.random() * tipos.length)];",
							"const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];",
							"",
							"// Generar fecha de vencimiento futura (entre 30 días y 2 años)",
							"const fechaVencimiento = new Date();",
							"fechaVencimiento.setDate(fechaVencimiento.getDate() + Math.floor(Math.random() * 700) + 30);",
							"",
							"const cantidad = Math.floor(Math.random() * 999) + 1;",
							"const precio = Math.floor(Math.random() * 50000) + 5000;",
							"const providerId = '550e8400-e29b-41d4-a716-446655440000';",
							"",
							"// Guardar variables para usar en el request",
							"pm.environment.set('sku_valido', sku);",
							"pm.environment.set('nombre_valido', nombre);",
							"pm.environment.set('fecha_vencimiento_valida', fechaVencimiento.toISOString());",
							"pm.environment.set('cantidad_valida', cantidad.toString());",
							"pm.environment.set('precio_valido', precio.toString());",
							"pm.environment.set('ubicacion_valida', ubicacion);",
							"pm.environment.set('descripcion_valida', `Descripcion del producto ${nombre}`);",
							"pm.environment.set('tipo_valido', tipo);",
							"pm.environment.set('provider_id_valido', providerId.toString());",
							"",
							"console.log('Datos generados:', {",
							"    sku, nombre, fechaVencimiento: fechaVencimiento.toISOString(),",
							"    cantidad, precio, ubicacion, tipo, providerId",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que el producto fue creado",
							"pm.test('Product was created successfully', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('registrado exitosamente');",
							"    pm.expect(response.data).to.have.property('sku');",
							"    pm.expect(response.data.sku).to.eql(pm.environment.get('sku_valido'));",
							"    pm.expect(response.data).to.have.property('provider_id');",
							"    pm.expect(response.data.provider_id).to.eql(pm.environment.get('provider_id_valido'));",
							"});",
							"",
							"// Guardar ID del producto para tests posteriores",
							"pm.test('Save product ID for later tests', function () {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.id) {",
							"        pm.environment.set('product_id', response.data.id);",
							"    }",
							"});",
							"",
							"console.log('Producto creado exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_valido}}\",\n    \"name\": \"{{nombre_valido}}\",\n    \"expiration_date\": \"{{fecha_vencimiento_valida}}\",\n    \"quantity\": {{cantidad_valida}},\n    \"price\": {{precio_valido}},\n    \"location\": \"{{ubicacion_valida}}\",\n    \"description\": \"{{descripcion_valida}}\",\n    \"product_type\": \"{{tipo_valido}}\",\n    \"provider_id\": \"{{provider_id_valido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - SKU Duplicado",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usar el mismo SKU del producto anterior para generar error",
							"const skuDuplicado = pm.environment.get('sku_valido');",
							"pm.environment.set('sku_duplicado', skuDuplicado);",
							"",
							"console.log('Usando SKU duplicado:', skuDuplicado);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about duplicate SKU', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('SKU ya existe');",
							"});",
							"",
							"console.log('Error de SKU duplicado validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_duplicado}}\",\n    \"name\": \"Producto Duplicado\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con SKU duplicado\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Campos Faltantes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about missing fields', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('Campos requeridos faltantes');",
							"});",
							"",
							"console.log('Error de campos faltantes validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-1234\",\n    \"name\": \"Producto Incompleto\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - SKU Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about invalid SKU', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('SKU');",
							"});",
							"",
							"console.log('Error de SKU inválido validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"INVALID-SKU\",\n    \"name\": \"Producto SKU Inválido\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con SKU inválido\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Fecha Pasada",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about past date', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('fecha de vencimiento debe ser posterior');",
							"});",
							"",
							"console.log('Error de fecha pasada validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-7777\",\n    \"name\": \"Producto Fecha Pasada\",\n    \"expiration_date\": \"2020-01-01T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con fecha de vencimiento pasada\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Cantidad Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about invalid quantity', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('cantidad');",
							"});",
							"",
							"console.log('Error de cantidad invalida validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-4444\",\n    \"name\": \"Producto Cantidad Invalida\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 0,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con cantidad invalida\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Ubicación Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about invalid location', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('ubicación');",
							"});",
							"",
							"console.log('Error de ubicación invalida validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-8888\",\n    \"name\": \"Producto Ubicacion Invalida\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"INVALID-LOCATION\",\n    \"description\": \"Producto con ubicacion invalida\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Todos los Productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que data es un array",
							"pm.test('Data is an array', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.be.an('array');",
							"});",
							"",
							"// Validar que hay al menos un producto",
							"pm.test('At least one product exists', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.length).to.be.at.least(1);",
							"});",
							"",
							"// Validar estructura de productos",
							"pm.test('Products have required fields', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.length > 0) {",
							"        const product = response.data[0];",
							"        pm.expect(product).to.have.property('sku');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('expiration_date');",
							"        pm.expect(product).to.have.property('quantity');",
							"        pm.expect(product).to.have.property('price');",
							"        pm.expect(product).to.have.property('location');",
							"    }",
							"});",
							"",
							"console.log('Lista de productos obtenida exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Producto por ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usar el ID del producto creado anteriormente",
							"const productId = pm.environment.get('product_id');",
							"if (!productId) {",
							"    pm.environment.set('product_id', '1');",
							"}",
							"",
							"console.log('Obteniendo producto con ID:', pm.environment.get('product_id'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar estructura del producto",
							"pm.test('Product has required fields', function () {",
							"    const response = pm.response.json();",
							"    const product = response.data;",
							"    pm.expect(product).to.have.property('sku');",
							"    pm.expect(product).to.have.property('name');",
							"    pm.expect(product).to.have.property('expiration_date');",
							"    pm.expect(product).to.have.property('quantity');",
							"    pm.expect(product).to.have.property('price');",
							"    pm.expect(product).to.have.property('location');",
							"    pm.expect(product).to.have.property('description');",
							"    pm.expect(product).to.have.property('product_type');",
							"});",
							"",
							"console.log('Producto obtenido por ID exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{product_id}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Producto por ID - No Encontrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about product not found', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('no encontrado');",
							"});",
							"",
							"console.log('Error de producto no encontrado validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/99999",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Productos Agrupados por Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que data tiene la estructura de grupos",
							"pm.test('Data has groups structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('groups');",
							"    pm.expect(response.data.groups).to.be.an('array');",
							"});",
							"",
							"// Validar estructura de cada grupo",
							"pm.test('Groups have required structure', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.groups.length > 0) {",
							"        const group = response.data.groups[0];",
							"        pm.expect(group).to.have.property('provider');",
							"        pm.expect(group).to.have.property('products');",
							"        pm.expect(group.provider).to.be.a('string');",
							"        pm.expect(group.products).to.be.an('array');",
							"    }",
							"});",
							"",
							"// Validar estructura de productos en cada grupo",
							"pm.test('Products in groups have required fields', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.groups.length > 0) {",
							"        const group = response.data.groups[0];",
							"        if (group.products.length > 0) {",
							"            const product = group.products[0];",
							"            pm.expect(product).to.have.property('name');",
							"            pm.expect(product).to.have.property('quantity');",
							"            pm.expect(product).to.have.property('price');",
							"            pm.expect(product.name).to.be.a('string');",
							"            pm.expect(product.quantity).to.be.a('number');",
							"            pm.expect(product.price).to.be.a('number');",
							"        }",
							"    }",
							"});",
							"",
							"// Validar que hay al menos un grupo",
							"pm.test('At least one group exists', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.groups.length).to.be.at.least(1);",
							"});",
							"",
							"console.log('Productos agrupados por proveedor obtenidos exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/providers/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"providers",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Producto por ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usar el ID del producto creado anteriormente",
							"const productId = pm.environment.get('product_id');",
							"if (!productId) {",
							"    pm.environment.set('product_id', '1');",
							"}",
							"",
							"console.log('Eliminando producto con ID:', pm.environment.get('product_id'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar mensaje de eliminación",
							"pm.test('Deletion message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('eliminado exitosamente');",
							"});",
							"",
							"console.log('Producto eliminado exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{product_id}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Producto por ID - No Encontrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about product not found', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('no encontrado');",
							"});",
							"",
							"console.log('Error de producto no encontrado para eliminar validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/99999",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Todos los Productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar estructura de data",
							"pm.test('Data has deleted_count', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('deleted_count');",
							"    pm.expect(response.data.deleted_count).to.be.a('number');",
							"});",
							"",
							"// Validar mensaje de eliminación",
							"pm.test('Deletion message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('eliminaron');",
							"});",
							"",
							"console.log('Todos los productos eliminados exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/delete-all",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"delete-all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Con Imagen Válida",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el producto con imagen",
							"const skuNumber = Math.floor(Math.random() * 9000) + 1000;",
							"const sku = `MED-${skuNumber}`;",
							"",
							"const nombres = [",
							"    'Paracetamol 500mg',",
							"    'Ibuprofeno 400mg',",
							"    'Aspirina 100mg',",
							"    'Omeprazol 20mg',",
							"    'Amoxicilina 500mg',",
							"    'Metformina 850mg',",
							"    'Losartan 50mg',",
							"    'Atorvastatina 20mg',",
							"    'Levotiroxina 50mcg',",
							"    'Metoprolol 50mg'",
							"];",
							"",
							"const tipos = ['Alto valor', 'Seguridad', 'Cadena fría'];",
							"const ubicaciones = ['A-01-01', 'A-01-02', 'A-02-01', 'B-01-01', 'B-02-01', 'C-01-01'];",
							"",
							"const nombre = nombres[Math.floor(Math.random() * nombres.length)];",
							"const tipo = tipos[Math.floor(Math.random() * tipos.length)];",
							"const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];",
							"",
							"// Generar fecha de vencimiento futura (entre 30 días y 2 años)",
							"const fechaVencimiento = new Date();",
							"fechaVencimiento.setDate(fechaVencimiento.getDate() + Math.floor(Math.random() * 700) + 30);",
							"",
							"const cantidad = Math.floor(Math.random() * 999) + 1;",
							"const precio = Math.floor(Math.random() * 50000) + 5000;",
							"const providerId = '550e8400-e29b-41d4-a716-446655440000';",
							"",
							"// Guardar variables para usar en el request",
							"pm.environment.set('sku_imagen', sku);",
							"pm.environment.set('nombre_imagen', nombre);",
							"pm.environment.set('fecha_vencimiento_imagen', fechaVencimiento.toISOString());",
							"pm.environment.set('cantidad_imagen', cantidad.toString());",
							"pm.environment.set('precio_imagen', precio.toString());",
							"pm.environment.set('ubicacion_imagen', ubicacion);",
							"pm.environment.set('descripcion_imagen', `Descripcion del producto ${nombre} con foto`);",
							"pm.environment.set('tipo_imagen', tipo);",
							"pm.environment.set('provider_id_imagen', providerId.toString());",
							"",
							"console.log('Datos generados para producto con imagen:', {",
							"    sku, nombre, fechaVencimiento: fechaVencimiento.toISOString(),",
							"    cantidad, precio, ubicacion, tipo, providerId",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"        pm.expect(response.data).to.have.property('photo_url');",
							"        pm.expect(response.data).to.have.property('photo_filename');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de producto con imagen procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "{{sku_imagen}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{nombre_imagen}}",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "{{fecha_vencimiento_imagen}}",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "{{cantidad_imagen}}",
							"type": "text"
						},
						{
							"key": "price",
							"value": "{{precio_imagen}}",
							"type": "text"
						},
						{
							"key": "location",
							"value": "{{ubicacion_imagen}}",
							"type": "text"
						},
						{
							"key": "description",
							"value": "{{descripcion_imagen}}",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "{{tipo_imagen}}",
							"type": "text"
						},
						{
							"key": "provider_id",
							"value": "{{provider_id_imagen}}",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo de imagen válido (JPG, PNG, GIF) máximo 5MB",
							"type": "file",
							"src": "/path/to/valid-image.jpg"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Imagen con Extensión Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de extensión inválida procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "MED-1235",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Producto con Archivo Inválido",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31T00:00:00Z",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "50",
							"type": "text"
						},
						{
							"key": "price",
							"value": "10000.0",
							"type": "text"
						},
						{
							"key": "location",
							"value": "B-02-02",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Producto con archivo no permitido",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "Seguridad",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo con extensión no permitida (.txt)",
							"type": "file",
							"src": "/path/to/invalid-file.txt"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Imagen Demasiado Grande",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de tamaño de archivo procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "MED-1236",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Producto con Imagen Grande",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31T00:00:00.000Z",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "50",
							"type": "text"
						},
						{
							"key": "price",
							"value": "10000.0",
							"type": "text"
						},
						{
							"key": "location",
							"value": "C-03-03",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Producto con imagen muy grande",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "Cadena fría",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo de imagen mayor a 5MB",
							"type": "file",
							"src": "/path/to/large-image.jpg"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Archivo Vacío",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de archivo vacío procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "MED-1237",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Producto con Archivo Vacío",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31T00:00:00.000Z",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "50",
							"type": "text"
						},
						{
							"key": "price",
							"value": "10000.0",
							"type": "text"
						},
						{
							"key": "location",
							"value": "D-04-04",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Producto con archivo vacío",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "Alto valor",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo de imagen vacío (0 bytes)",
							"type": "file",
							"src": "/path/to/empty-file.jpg"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Sin Imagen (Válido)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos válidos para producto sin imagen",
							"const skuNumber = Math.floor(Math.random() * 9000) + 1000;",
							"const sku = `MED-${skuNumber}`;",
							"",
							"const nombres = [",
							"    'Paracetamol 500mg',",
							"    'Ibuprofeno 400mg',",
							"    'Aspirina 100mg',",
							"    'Omeprazol 20mg',",
							"    'Amoxicilina 500mg'",
							"];",
							"",
							"const tipos = ['Alto valor', 'Seguridad', 'Cadena fría'];",
							"const ubicaciones = ['A-01-01', 'A-01-02', 'A-02-01', 'B-01-01', 'B-02-01', 'C-01-01'];",
							"",
							"const nombre = nombres[Math.floor(Math.random() * nombres.length)] + ' Sin Imagen';",
							"const tipo = tipos[Math.floor(Math.random() * tipos.length)];",
							"const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];",
							"",
							"// Generar fecha de vencimiento futura",
							"const fechaVencimiento = new Date();",
							"fechaVencimiento.setDate(fechaVencimiento.getDate() + Math.floor(Math.random() * 700) + 30);",
							"",
							"const cantidad = Math.floor(Math.random() * 999) + 1;",
							"const precio = Math.floor(Math.random() * 50000) + 5000;",
							"const providerId = '550e8400-e29b-41d4-a716-446655440000';",
							"",
							"// Guardar variables",
							"pm.environment.set('sku_sin_imagen', sku);",
							"pm.environment.set('nombre_sin_imagen', nombre);",
							"pm.environment.set('fecha_sin_imagen', fechaVencimiento.toISOString());",
							"pm.environment.set('cantidad_sin_imagen', cantidad.toString());",
							"pm.environment.set('precio_sin_imagen', precio.toString());",
							"pm.environment.set('ubicacion_sin_imagen', ubicacion);",
							"pm.environment.set('descripcion_sin_imagen', `Descripción del producto ${nombre}`);",
							"pm.environment.set('tipo_sin_imagen', tipo);",
							"pm.environment.set('provider_id_sin_imagen', providerId.toString());",
							"",
							"console.log('Datos generados para producto sin imagen:', {",
							"    sku, nombre, fechaVencimiento: fechaVencimiento.toISOString(),",
							"    cantidad, precio, ubicacion, tipo, providerId",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que el producto no tenga foto",
							"pm.test('Product has no photo', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.photo_filename).to.be.null;",
							"    pm.expect(response.data.photo_url).to.be.null;",
							"});",
							"",
							"console.log('Producto sin imagen creado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"sku\": \"{{sku_sin_imagen}}\",\n  \"name\": \"{{nombre_sin_imagen}}\",\n  \"expiration_date\": \"{{fecha_sin_imagen}}\",\n  \"quantity\": {{cantidad_sin_imagen}},\n  \"price\": {{precio_sin_imagen}},\n  \"location\": \"{{ubicacion_sin_imagen}}\",\n  \"description\": \"{{descripcion_sin_imagen}}\",\n  \"product_type\": \"{{tipo_sin_imagen}}\",\n  \"provider_id\": \"{{provider_id_sin_imagen}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Provider ID Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar código de estado",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response).to.have.property('details');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message mentions provider_id', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('proveedor');",
							"});",
							"",
							"console.log('Error de validación de provider_id confirmado');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-6666\",\n    \"name\": \"Producto Provider ID Invalido\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con provider_id invalido\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"invalid-uuid\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Producto con Imagen - Verificar URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"        if (response.data.photo_filename) {",
							"            pm.expect(response.data.photo_url).to.include('storage.googleapis.com');",
							"            pm.expect(response.data.photo_url).to.include('products/');",
							"        }",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de consulta de producto procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/1",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"1"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url_local_inventario",
			"value": "http://localhost:8082",
			"type": "string"
		}
	]
}