{
	"info": {
		"_postman_id": "de6ea645-282a-4aa6-b54d-0a2f0f684bbd",
		"name": "MediSupply Inventory API - Con Datos Aleatorios",
		"description": "Colección para validar el servicio de inventarios MediSupply con datos aleatorios generados automáticamente",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2750860",
		"_collection_link": "https://timecontrol.postman.co/workspace/TCT~e4bf613c-84ca-4624-ad9c-4c8c0259e211/collection/2750860-de6ea645-282a-4aa6-b54d-0a2f0f684bbd?action=share&source=collection_link&creator=2750860"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar que la respuesta sea 'pong'",
							"pm.test('Response is pong', function () {",
							"    const responseText = pm.response.text().trim();",
							"    pm.expect(responseText).to.eql('\"pong\"');",
							"});",
							"",
							"console.log('Validaciones completadas para health check');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/ping",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Token Admin - Exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar respuesta exitosa de autenticación",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('access_token');",
							"    pm.expect(responseJson.access_token).to.be.a('string');",
							"    pm.expect(responseJson.access_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response has token_type\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('token_type');",
							"    pm.expect(responseJson.token_type).to.eql('Bearer');",
							"});",
							"",
							"pm.test(\"Response has expires_in\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('expires_in');",
							"    pm.expect(responseJson.expires_in).to.be.a('number');",
							"    pm.expect(responseJson.expires_in).to.be.above(0);",
							"});",
							"",
							"pm.test(\"Response has refresh_token\", function () {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.have.property('refresh_token');",
							"    pm.expect(responseJson.refresh_token).to.be.a('string');",
							"    pm.expect(responseJson.refresh_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Response time is less than 5000ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);",
							"});",
							"",
							"// Guardar tokens para uso posterior",
							"const responseJson = pm.response.json();",
							"if (responseJson && responseJson.access_token) {",
							"    pm.globals.set('auth_token', responseJson.access_token);",
							"    console.log('Token de autenticación guardado');",
							"}",
							"",
							"// Guardar refresh_token para logout",
							"if (responseJson && responseJson.refresh_token) {",
							"    pm.globals.set('refresh_token', responseJson.refresh_token);",
							"    console.log('Refresh token guardado para logout');",
							"}"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"user\": \"medisupply05@gmail.com\",\n    \"password\": \"Admin123456\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/auth/token",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"auth",
						"token"
					]
				},
				"description": "Autentica un usuario admin usando las credenciales creadas anteriormente"
			},
			"response": []
		},
		{
			"name": "Crear Producto - Datos Válidos",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el producto",
							"const skuNumber = Math.floor(Math.random() * 9000) + 1000;",
							"const sku = `MED-${skuNumber}`;",
							"",
							"const nombres = [",
							"    'Paracetamol 500mg',",
							"    'Ibuprofeno 400mg',",
							"    'Aspirina 100mg',",
							"    'Omeprazol 20mg',",
							"    'Amoxicilina 500mg',",
							"    'Metformina 850mg',",
							"    'Losartan 50mg',",
							"    'Atorvastatina 20mg',",
							"    'Levotiroxina 50mcg',",
							"    'Metoprolol 50mg'",
							"];",
							"",
							"const tipos = ['Alto valor', 'Seguridad', 'Cadena de frío'];",
							"const ubicaciones = ['A-01-01', 'A-01-02', 'A-02-01', 'B-01-01', 'B-02-01', 'C-01-01'];",
							"",
							"const nombre = nombres[Math.floor(Math.random() * nombres.length)];",
							"const tipo = tipos[Math.floor(Math.random() * tipos.length)];",
							"const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];",
							"",
							"// Generar fecha de vencimiento futura (entre 30 días y 2 años)",
							"const fechaVencimiento = new Date();",
							"fechaVencimiento.setDate(fechaVencimiento.getDate() + Math.floor(Math.random() * 700) + 30);",
							"",
							"const cantidad = Math.floor(Math.random() * 999) + 1;",
							"const precio = Math.floor(Math.random() * 50000) + 5000;",
							"const providerId = '550e8400-e29b-41d4-a716-446655440000';",
							"",
							"// Guardar variables para usar en el request",
							"pm.environment.set('sku_valido', sku);",
							"pm.environment.set('nombre_valido', nombre);",
							"pm.environment.set('fecha_vencimiento_valida', fechaVencimiento.toISOString());",
							"pm.environment.set('cantidad_valida', cantidad.toString());",
							"pm.environment.set('precio_valido', precio.toString());",
							"pm.environment.set('ubicacion_valida', ubicacion);",
							"pm.environment.set('descripcion_valida', `Descripcion del producto ${nombre}`);",
							"pm.environment.set('tipo_valido', tipo);",
							"pm.environment.set('provider_id_valido', providerId.toString());",
							"",
							"console.log('Datos generados:', {",
							"    sku, nombre, fechaVencimiento: fechaVencimiento.toISOString(),",
							"    cantidad, precio, ubicacion, tipo, providerId",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que el producto fue creado",
							"pm.test('Product was created successfully', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('registrado exitosamente');",
							"    pm.expect(response.data).to.have.property('sku');",
							"    pm.expect(response.data.sku).to.eql(pm.environment.get('sku_valido'));",
							"    pm.expect(response.data).to.have.property('provider_id');",
							"    pm.expect(response.data.provider_id).to.eql(pm.environment.get('provider_id_valido'));",
							"});",
							"",
							"// Guardar ID del producto para tests posteriores",
							"pm.test('Save product ID for later tests', function () {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.id) {",
							"        pm.environment.set('product_id', response.data.id);",
							"          pm.environment.set('test_product_id', response.data.id);",
							"          pm.environment.set('test_product_id_subtract', response.data.id);",
							"          pm.environment.set('test_product_id_insufficient', response.data.id);",
							"          pm.environment.set('cleanup_product_id', response.data.id);",
							"    }",
							"});",
							"",
							"console.log('Producto creado exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_valido}}\",\n    \"name\": \"{{nombre_valido}}\",\n    \"expiration_date\": \"{{fecha_vencimiento_valida}}\",\n    \"quantity\": {{cantidad_valida}},\n    \"price\": {{precio_valido}},\n    \"location\": \"{{ubicacion_valida}}\",\n    \"description\": \"{{descripcion_valida}}\",\n    \"product_type\": \"{{tipo_valido}}\",\n    \"provider_id\": \"{{provider_id_valido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - SKU Duplicado",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usar el mismo SKU del producto anterior para generar error",
							"const skuDuplicado = pm.environment.get('sku_valido');",
							"pm.environment.set('sku_duplicado', skuDuplicado);",
							"",
							"console.log('Usando SKU duplicado:', skuDuplicado);"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about duplicate SKU', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('SKU ya existe');",
							"});",
							"",
							"console.log('Error de SKU duplicado validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_duplicado}}\",\n    \"name\": \"Producto Duplicado\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con SKU duplicado\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Campos Faltantes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about missing fields', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('Campos requeridos faltantes');",
							"});",
							"",
							"console.log('Error de campos faltantes validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-1234\",\n    \"name\": \"Producto Incompleto\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - SKU Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about invalid SKU', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('SKU');",
							"});",
							"",
							"console.log('Error de SKU inválido validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"INVALID-SKU\",\n    \"name\": \"Producto SKU Inválido\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con SKU inválido\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Fecha Pasada",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about past date', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('fecha de vencimiento debe ser posterior');",
							"});",
							"",
							"console.log('Error de fecha pasada validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-7777\",\n    \"name\": \"Producto Fecha Pasada\",\n    \"expiration_date\": \"2020-01-01T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con fecha de vencimiento pasada\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Cantidad Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about invalid quantity', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('cantidad');",
							"});",
							"",
							"console.log('Error de cantidad invalida validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-4444\",\n    \"name\": \"Producto Cantidad Invalida\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 0,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con cantidad invalida\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Ubicación Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about invalid location', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('ubicación');",
							"});",
							"",
							"console.log('Error de ubicación invalida validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-8888\",\n    \"name\": \"Producto Ubicacion Invalida\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"INVALID-LOCATION\",\n    \"description\": \"Producto con ubicacion invalida\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Todos los Productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar estructura de paginación",
							"pm.test('Response has pagination structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('products');",
							"    pm.expect(response.data).to.have.property('pagination');",
							"    pm.expect(response.data.products).to.be.an('array');",
							"});",
							"",
							"// Validar información de paginación",
							"pm.test('Pagination has required fields', function () {",
							"    const response = pm.response.json();",
							"    const pagination = response.data.pagination;",
							"    pm.expect(pagination).to.have.property('page');",
							"    pm.expect(pagination).to.have.property('per_page');",
							"    pm.expect(pagination).to.have.property('total');",
							"    pm.expect(pagination).to.have.property('total_pages');",
							"    pm.expect(pagination).to.have.property('has_next');",
							"    pm.expect(pagination).to.have.property('has_prev');",
							"    pm.expect(pagination).to.have.property('next_page');",
							"    pm.expect(pagination).to.have.property('prev_page');",
							"});",
							"",
							"// Validar tipos de datos de paginación",
							"pm.test('Pagination data types are correct', function () {",
							"    const response = pm.response.json();",
							"    const pagination = response.data.pagination;",
							"    pm.expect(pagination.page).to.be.a('number');",
							"    pm.expect(pagination.per_page).to.be.a('number');",
							"    pm.expect(pagination.total).to.be.a('number');",
							"    pm.expect(pagination.total_pages).to.be.a('number');",
							"    pm.expect(pagination.has_next).to.be.a('boolean');",
							"    pm.expect(pagination.has_prev).to.be.a('boolean');",
							"});",
							"",
							"// Validar que hay al menos un producto",
							"pm.test('At least one product exists', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.products.length).to.be.at.least(1);",
							"});",
							"",
							"// Validar estructura de productos",
							"pm.test('Products have required fields', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.products.length > 0) {",
							"        const product = response.data.products[0];",
							"        pm.expect(product).to.have.property('sku');",
							"        pm.expect(product).to.have.property('name');",
							"        pm.expect(product).to.have.property('expiration_date');",
							"        pm.expect(product).to.have.property('quantity');",
							"        pm.expect(product).to.have.property('price');",
							"        pm.expect(product).to.have.property('location');",
							"    }",
							"});",
							"",
							"// Guardar datos de paginación para tests posteriores",
							"pm.test('Save pagination data for later tests', function () {",
							"    const response = pm.response.json();",
							"    if (response.data && response.data.pagination) {",
							"        const pagination = response.data.pagination;",
							"        pm.environment.set('total_products', pagination.total);",
							"        pm.environment.set('total_pages', pagination.total_pages);",
							"        pm.environment.set('current_page', pagination.page);",
							"        pm.environment.set('per_page', pagination.per_page);",
							"        pm.environment.set('has_next', pagination.has_next);",
							"        pm.environment.set('has_prev', pagination.has_prev);",
							"        ",
							"        // Guardar IDs de productos para tests posteriores",
							"        if (response.data.products && response.data.products.length > 0) {",
							"            const productIds = response.data.products.map(p => p.id);",
							"            pm.environment.set('product_ids', JSON.stringify(productIds));",
							"            pm.environment.set('first_product_id', productIds[0]);",
							"            pm.environment.set('last_product_id', productIds[productIds.length - 1]);",
							"        }",
							"    }",
							"});",
							"",
							"console.log('Lista de productos obtenida exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Paginación - Página 1 con 5 elementos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de paginación",
							"pm.test('Pagination structure is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('products');",
							"    pm.expect(response.data).to.have.property('pagination');",
							"});",
							"",
							"// Validar parámetros de paginación específicos",
							"pm.test('Pagination parameters are correct', function () {",
							"    const response = pm.response.json();",
							"    const pagination = response.data.pagination;",
							"    pm.expect(pagination.page).to.equal(1);",
							"    pm.expect(pagination.per_page).to.equal(5);",
							"});",
							"",
							"// Validar que no hay más de 5 productos",
							"pm.test('Maximum 5 products per page', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.products.length).to.be.at.most(5);",
							"});",
							"",
							"// Validar que no hay página anterior",
							"pm.test('No previous page on first page', function () {",
							"    const response = pm.response.json();",
							"    const pagination = response.data.pagination;",
							"    pm.expect(pagination.has_prev).to.be.false;",
							"    pm.expect(pagination.prev_page).to.be.null;",
							"});",
							"",
							"console.log('Paginación página 1 con 5 elementos verificada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products?page=1&per_page=5",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Paginación - Validación de Parámetros Inválidos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about page parameter', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('page');",
							"});",
							"",
							"console.log('Validación de parámetros inválidos verificada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products?page=0",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Paginación - Validación de per_page Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about per_page parameter', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('per_page');",
							"});",
							"",
							"console.log('Validación de per_page inválido verificada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products?per_page=150",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					],
					"query": [
						{
							"key": "per_page",
							"value": "150"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Producto por ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usar el ID del producto creado anteriormente",
							"const productId = pm.environment.get('product_id');",
							"if (!productId) {",
							"    pm.environment.set('product_id', '1');",
							"}",
							"",
							"console.log('Obteniendo producto con ID:', pm.environment.get('product_id'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar estructura del producto",
							"pm.test('Product has required fields', function () {",
							"    const response = pm.response.json();",
							"    const product = response.data;",
							"    pm.expect(product).to.have.property('sku');",
							"    pm.expect(product).to.have.property('name');",
							"    pm.expect(product).to.have.property('expiration_date');",
							"    pm.expect(product).to.have.property('quantity');",
							"    pm.expect(product).to.have.property('price');",
							"    pm.expect(product).to.have.property('location');",
							"    pm.expect(product).to.have.property('description');",
							"    pm.expect(product).to.have.property('product_type');",
							"});",
							"",
							"console.log('Producto obtenido por ID exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{product_id}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Producto por ID - No Encontrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 404', function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about product not found', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('no encontrado');",
							"});",
							"",
							"console.log('Error de producto no encontrado validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/99999",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Productos Agrupados por Proveedor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que data tiene la estructura de grupos",
							"pm.test('Data has groups structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('groups');",
							"    pm.expect(response.data.groups).to.be.an('array');",
							"});",
							"",
							"// Validar estructura de cada grupo",
							"pm.test('Groups have required structure', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.groups.length > 0) {",
							"        const group = response.data.groups[0];",
							"        pm.expect(group).to.have.property('provider');",
							"        pm.expect(group).to.have.property('products');",
							"        pm.expect(group.provider).to.be.a('string');",
							"        pm.expect(group.products).to.be.an('array');",
							"    }",
							"});",
							"",
							"// Validar estructura de productos en cada grupo",
							"pm.test('Products in groups have required fields', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.groups.length > 0) {",
							"        const group = response.data.groups[0];",
							"        if (group.products.length > 0) {",
							"            const product = group.products[0];",
							"            pm.expect(product).to.have.property('name');",
							"            pm.expect(product).to.have.property('quantity');",
							"            pm.expect(product).to.have.property('price');",
							"            pm.expect(product.name).to.be.a('string');",
							"            pm.expect(product.quantity).to.be.a('number');",
							"            pm.expect(product.price).to.be.a('number');",
							"        }",
							"    }",
							"});",
							"",
							"// Validar que hay al menos un grupo",
							"pm.test('At least one group exists', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.groups.length).to.be.at.least(1);",
							"});",
							"",
							"console.log('Productos agrupados por proveedor obtenidos exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/providers/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"providers",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Productos Agrupados por Proveedor y Recomendados",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que data tiene la estructura de grupos",
							"pm.test('Data has groups structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('groups');",
							"    pm.expect(response.data.groups).to.be.an('array');",
							"});",
							"",
							"// Validar estructura de cada grupo",
							"pm.test('Groups have required structure', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.groups.length > 0) {",
							"        const group = response.data.groups[0];",
							"        pm.expect(group).to.have.property('provider');",
							"        pm.expect(group).to.have.property('products');",
							"        pm.expect(group.provider).to.be.a('string');",
							"        pm.expect(group.products).to.be.an('array');",
							"    }",
							"});",
							"",
							"// Validar estructura de productos en cada grupo",
							"pm.test('Products in groups have required fields', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.groups.length > 0) {",
							"        const group = response.data.groups[0];",
							"        if (group.products.length > 0) {",
							"            const product = group.products[0];",
							"            pm.expect(product).to.have.property('name');",
							"            pm.expect(product).to.have.property('quantity');",
							"            pm.expect(product).to.have.property('price');",
							"            pm.expect(product.name).to.be.a('string');",
							"            pm.expect(product.quantity).to.be.a('number');",
							"            pm.expect(product.price).to.be.a('number');",
							"        }",
							"    }",
							"});",
							"",
							"// Validar que hay al menos un grupo",
							"pm.test('At least one group exists', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.groups.length).to.be.at.least(1);",
							"});",
							"",
							"console.log('Productos agrupados por proveedor obtenidos exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/providers/products?userId=userId",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"providers",
						"products"
					],
					"query": [
						{
							"key": "userId",
							"value": "userId"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Producto por ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Usar el ID del producto creado anteriormente",
							"const productId = pm.environment.get('product_id');",
							"if (!productId) {",
							"    pm.environment.set('product_id', '1');",
							"}",
							"",
							"console.log('Eliminando producto con ID:', pm.environment.get('product_id'));"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar mensaje de eliminación",
							"pm.test('Deletion message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('eliminado exitosamente');",
							"});",
							"",
							"console.log('Producto eliminado exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{product_id}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Producto por ID - No Encontrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Response has error structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message is about product not found', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('no encontrado');",
							"});",
							"",
							"console.log('Error de producto no encontrado para eliminar validado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/99999",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"99999"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar Todos los Productos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar estructura de data",
							"pm.test('Data has deleted_count', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('deleted_count');",
							"    pm.expect(response.data.deleted_count).to.be.a('number');",
							"});",
							"",
							"// Validar mensaje de eliminación",
							"pm.test('Deletion message is correct', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.message).to.include('eliminaron');",
							"});",
							"",
							"console.log('Todos los productos eliminados exitosamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/delete-all",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"delete-all"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Con Imagen Válida",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos aleatorios para el producto con imagen",
							"const skuNumber = Math.floor(Math.random() * 9000) + 1000;",
							"const sku = `MED-${skuNumber}`;",
							"",
							"const nombres = [",
							"    'Paracetamol 500mg',",
							"    'Ibuprofeno 400mg',",
							"    'Aspirina 100mg',",
							"    'Omeprazol 20mg',",
							"    'Amoxicilina 500mg',",
							"    'Metformina 850mg',",
							"    'Losartan 50mg',",
							"    'Atorvastatina 20mg',",
							"    'Levotiroxina 50mcg',",
							"    'Metoprolol 50mg'",
							"];",
							"",
							"const tipos = ['Alto valor', 'Seguridad', 'Cadena de frío'];",
							"const ubicaciones = ['A-01-01', 'A-01-02', 'A-02-01', 'B-01-01', 'B-02-01', 'C-01-01'];",
							"",
							"const nombre = nombres[Math.floor(Math.random() * nombres.length)];",
							"const tipo = tipos[Math.floor(Math.random() * tipos.length)];",
							"const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];",
							"",
							"// Generar fecha de vencimiento futura (entre 30 días y 2 años)",
							"const fechaVencimiento = new Date();",
							"fechaVencimiento.setDate(fechaVencimiento.getDate() + Math.floor(Math.random() * 700) + 30);",
							"",
							"const cantidad = Math.floor(Math.random() * 999) + 1;",
							"const precio = Math.floor(Math.random() * 50000) + 5000;",
							"const providerId = '550e8400-e29b-41d4-a716-446655440000';",
							"",
							"// Guardar variables para usar en el request",
							"pm.environment.set('sku_imagen', sku);",
							"pm.environment.set('nombre_imagen', nombre);",
							"pm.environment.set('fecha_vencimiento_imagen', fechaVencimiento.toISOString());",
							"pm.environment.set('cantidad_imagen', cantidad.toString());",
							"pm.environment.set('precio_imagen', precio.toString());",
							"pm.environment.set('ubicacion_imagen', ubicacion);",
							"pm.environment.set('descripcion_imagen', `Descripcion del producto ${nombre} con foto`);",
							"pm.environment.set('tipo_imagen', tipo);",
							"pm.environment.set('provider_id_imagen', providerId.toString());",
							"",
							"console.log('Datos generados para producto con imagen:', {",
							"    sku, nombre, fechaVencimiento: fechaVencimiento.toISOString(),",
							"    cantidad, precio, ubicacion, tipo, providerId",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"        pm.expect(response.data).to.have.property('photo_url');",
							"        pm.expect(response.data).to.have.property('photo_filename');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de producto con imagen procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "{{sku_imagen}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{nombre_imagen}}",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "{{fecha_vencimiento_imagen}}",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "{{cantidad_imagen}}",
							"type": "text"
						},
						{
							"key": "price",
							"value": "{{precio_imagen}}",
							"type": "text"
						},
						{
							"key": "location",
							"value": "{{ubicacion_imagen}}",
							"type": "text"
						},
						{
							"key": "description",
							"value": "{{descripcion_imagen}}",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "{{tipo_imagen}}",
							"type": "text"
						},
						{
							"key": "provider_id",
							"value": "{{provider_id_imagen}}",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo de imagen válido (JPG, PNG, GIF) máximo 5MB",
							"type": "file",
							"src": "/path/to/valid-image.jpg"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Imagen con Extensión Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de extensión inválida procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "MED-1235",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Producto con Archivo Inválido",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31T00:00:00Z",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "50",
							"type": "text"
						},
						{
							"key": "price",
							"value": "10000.0",
							"type": "text"
						},
						{
							"key": "location",
							"value": "B-02-02",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Producto con archivo no permitido",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "Seguridad",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo con extensión no permitida (.txt)",
							"type": "file",
							"src": "/path/to/invalid-file.txt"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Imagen Demasiado Grande",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de tamaño de archivo procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "MED-1236",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Producto con Imagen Grande",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31T00:00:00.000Z",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "50",
							"type": "text"
						},
						{
							"key": "price",
							"value": "10000.0",
							"type": "text"
						},
						{
							"key": "location",
							"value": "C-03-03",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Producto con imagen muy grande",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "Cadena de frío",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo de imagen mayor a 5MB",
							"type": "file",
							"src": "/path/to/large-image.jpg"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Archivo Vacío",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de archivo vacío procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "sku",
							"value": "MED-1237",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Producto con Archivo Vacío",
							"type": "text"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31T00:00:00.000Z",
							"type": "text"
						},
						{
							"key": "quantity",
							"value": "50",
							"type": "text"
						},
						{
							"key": "price",
							"value": "10000.0",
							"type": "text"
						},
						{
							"key": "location",
							"value": "D-04-04",
							"type": "text"
						},
						{
							"key": "description",
							"value": "Producto con archivo vacío",
							"type": "text"
						},
						{
							"key": "product_type",
							"value": "Alto valor",
							"type": "text"
						},
						{
							"key": "photo",
							"description": "Archivo de imagen vacío (0 bytes)",
							"type": "file",
							"src": "/path/to/empty-file.jpg"
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Sin Imagen (Válido)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar datos válidos para producto sin imagen",
							"const skuNumber = Math.floor(Math.random() * 9000) + 1000;",
							"const sku = `MED-${skuNumber}`;",
							"",
							"const nombres = [",
							"    'Paracetamol 500mg',",
							"    'Ibuprofeno 400mg',",
							"    'Aspirina 100mg',",
							"    'Omeprazol 20mg',",
							"    'Amoxicilina 500mg'",
							"];",
							"",
							"const tipos = ['Alto valor', 'Seguridad', 'Cadena de frío'];",
							"const ubicaciones = ['A-01-01', 'A-01-02', 'A-02-01', 'B-01-01', 'B-02-01', 'C-01-01'];",
							"",
							"const nombre = nombres[Math.floor(Math.random() * nombres.length)] + ' Sin Imagen';",
							"const tipo = tipos[Math.floor(Math.random() * tipos.length)];",
							"const ubicacion = ubicaciones[Math.floor(Math.random() * ubicaciones.length)];",
							"",
							"// Generar fecha de vencimiento futura",
							"const fechaVencimiento = new Date();",
							"fechaVencimiento.setDate(fechaVencimiento.getDate() + Math.floor(Math.random() * 700) + 30);",
							"",
							"const cantidad = Math.floor(Math.random() * 999) + 1;",
							"const precio = Math.floor(Math.random() * 50000) + 5000;",
							"const providerId = '550e8400-e29b-41d4-a716-446655440000';",
							"",
							"// Guardar variables",
							"pm.environment.set('sku_sin_imagen', sku);",
							"pm.environment.set('nombre_sin_imagen', nombre);",
							"pm.environment.set('fecha_sin_imagen', fechaVencimiento.toISOString());",
							"pm.environment.set('cantidad_sin_imagen', cantidad.toString());",
							"pm.environment.set('precio_sin_imagen', precio.toString());",
							"pm.environment.set('ubicacion_sin_imagen', ubicacion);",
							"pm.environment.set('descripcion_sin_imagen', `Descripción del producto ${nombre}`);",
							"pm.environment.set('tipo_sin_imagen', tipo);",
							"pm.environment.set('provider_id_sin_imagen', providerId.toString());",
							"",
							"console.log('Datos generados para producto sin imagen:', {",
							"    sku, nombre, fechaVencimiento: fechaVencimiento.toISOString(),",
							"    cantidad, precio, ubicacion, tipo, providerId",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 201', function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar que el producto no tenga foto",
							"pm.test('Product has no photo', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.photo_filename).to.be.null;",
							"    pm.expect(response.data.photo_url).to.be.null;",
							"});",
							"",
							"console.log('Producto sin imagen creado correctamente');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"sku\": \"{{sku_sin_imagen}}\",\n  \"name\": \"{{nombre_sin_imagen}}\",\n  \"expiration_date\": \"{{fecha_sin_imagen}}\",\n  \"quantity\": {{cantidad_sin_imagen}},\n  \"price\": {{precio_sin_imagen}},\n  \"location\": \"{{ubicacion_sin_imagen}}\",\n  \"description\": \"{{descripcion_sin_imagen}}\",\n  \"product_type\": \"{{tipo_sin_imagen}}\",\n  \"provider_id\": \"{{provider_id_sin_imagen}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear Producto - Provider ID Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar código de estado",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response).to.have.property('details');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message mentions provider_id', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('proveedor');",
							"});",
							"",
							"console.log('Error de validación de provider_id confirmado');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"MED-6666\",\n    \"name\": \"Producto Provider ID Invalido\",\n    \"expiration_date\": \"2025-12-31T00:00:00.000Z\",\n    \"quantity\": 50,\n    \"price\": 15000,\n    \"location\": \"A-01-01\",\n    \"description\": \"Producto con provider_id invalido\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"invalid-uuid\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Producto con Imagen - Verificar URL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has proper structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    if (response.success) {",
							"        pm.expect(response).to.have.property('message');",
							"        pm.expect(response).to.have.property('data');",
							"        if (response.data.photo_filename) {",
							"            pm.expect(response.data.photo_url).to.include('storage.googleapis.com');",
							"            pm.expect(response.data.photo_url).to.include('products/');",
							"        }",
							"    } else {",
							"        pm.expect(response).to.have.property('error');",
							"    }",
							"});",
							"",
							"console.log('Respuesta de consulta de producto procesada');"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/1",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Filtros - Filtrar por SKU",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar estructura de datos",
							"pm.test('Data structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('products');",
							"    pm.expect(response.data).to.have.property('filters_applied');",
							"    pm.expect(response.data).to.have.property('pagination');",
							"});",
							"",
							"// Validar filtros aplicados",
							"pm.test('Filters applied', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.filters_applied).to.have.property('sku');",
							"    pm.expect(response.data.filters_applied.sku).to.eql('MED');",
							"});",
							"",
							"// Guardar datos para tests posteriores",
							"pm.test('Save filter data', function () {",
							"    const response = pm.response.json();",
							"    if (response.data.products && response.data.products.length > 0) {",
							"        pm.environment.set('filtered_product_id', response.data.products[0].id);",
							"        pm.environment.set('filtered_product_sku', response.data.products[0].sku);",
							"        pm.environment.set('filtered_product_name', response.data.products[0].name);",
							"        pm.environment.set('filtered_product_quantity', response.data.products[0].quantity);",
							"        pm.environment.set('filtered_product_price', response.data.products[0].price);",
							"        pm.environment.set('filtered_product_location', response.data.products[0].location);",
							"        pm.environment.set('filtered_product_expiration_date', response.data.products[0].expiration_date);",
							"    }",
							"});",
							"",
							"console.log('Filtro por SKU verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar productos cuyo SKU contenga 'MED'"
						}
					]
				},
				"description": "Filtrar productos por SKU que contenga 'MED'"
			},
			"response": []
		},
		{
			"name": "Filtros - Filtrar por Nombre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar filtros aplicados",
							"pm.test('Filters applied', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.filters_applied).to.have.property('name');",
							"    pm.expect(response.data.filters_applied.name).to.eql('Paracetamol');",
							"});",
							"",
							"console.log('Filtro por nombre verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?name=Paracetamol",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "name",
							"value": "Paracetamol",
							"description": "Filtrar productos cuyo nombre contenga 'Paracetamol'"
						}
					]
				},
				"description": "Filtrar productos por nombre que contenga 'Paracetamol'"
			},
			"response": []
		},
		{
			"name": "Filtros - Combinación de 2 Filtros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar filtros aplicados",
							"pm.test('Multiple filters applied', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.filters_applied.sku).to.eql('MED');",
							"    pm.expect(response.data.filters_applied.name).to.eql('Paracetamol');",
							"    pm.expect(response.data.filters_applied.quantity).to.be.null;",
							"    pm.expect(response.data.filters_applied.price).to.be.null;",
							"    pm.expect(response.data.filters_applied.location).to.be.null;",
							"    pm.expect(response.data.filters_applied.expiration_date).to.be.null;",
							"});",
							"",
							"console.log('Combinación de 2 filtros verificada exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED&name=Paracetamol",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar por SKU que contenga 'MED'"
						},
						{
							"key": "name",
							"value": "Paracetamol",
							"description": "Filtrar por nombre que contenga 'Paracetamol'"
						}
					]
				},
				"description": "Combinar filtros por SKU y nombre"
			},
			"response": []
		},
		{
			"name": "Filtros - Combinación de 3 Filtros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar filtros aplicados",
							"pm.test('Three filters applied', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.filters_applied.sku).to.eql('MED');",
							"    pm.expect(response.data.filters_applied.name).to.eql('Paracetamol');",
							"    pm.expect(response.data.filters_applied.quantity).to.eql(100);",
							"    pm.expect(response.data.filters_applied.price).to.be.null;",
							"    pm.expect(response.data.filters_applied.location).to.be.null;",
							"    pm.expect(response.data.filters_applied.expiration_date).to.be.null;",
							"});",
							"",
							"console.log('Combinación de 3 filtros verificada exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED&name=Paracetamol&quantity=100",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar por SKU que contenga 'MED'"
						},
						{
							"key": "name",
							"value": "Paracetamol",
							"description": "Filtrar por nombre que contenga 'Paracetamol'"
						},
						{
							"key": "quantity",
							"value": "100",
							"description": "Filtrar por cantidad exacta de 100"
						}
					]
				},
				"description": "Combinar filtros por SKU, nombre y cantidad"
			},
			"response": []
		},
		{
			"name": "Filtros - Todos los Filtros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar todos los filtros aplicados",
							"pm.test('All filters applied', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.filters_applied.sku).to.eql('MED');",
							"    pm.expect(response.data.filters_applied.name).to.eql('Paracetamol');",
							"    pm.expect(response.data.filters_applied.quantity).to.eql(100);",
							"    pm.expect(response.data.filters_applied.price).to.eql(15.5);",
							"    pm.expect(response.data.filters_applied.location).to.eql('A-01');",
							"    pm.expect(response.data.filters_applied.expiration_date).to.eql('2025-12-31');",
							"});",
							"",
							"console.log('Todos los filtros verificados exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED&name=Paracetamol&quantity=100&price=15.50&location=A-01&expiration_date=2025-12-31",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar por SKU que contenga 'MED'"
						},
						{
							"key": "name",
							"value": "Paracetamol",
							"description": "Filtrar por nombre que contenga 'Paracetamol'"
						},
						{
							"key": "quantity",
							"value": "100",
							"description": "Filtrar por cantidad exacta de 100"
						},
						{
							"key": "price",
							"value": "15.50",
							"description": "Filtrar por precio exacto de 15.50"
						},
						{
							"key": "location",
							"value": "A-01",
							"description": "Filtrar por ubicación que contenga 'A-01'"
						},
						{
							"key": "expiration_date",
							"value": "2025-12-31",
							"description": "Filtrar por fecha de vencimiento exacta"
						}
					]
				},
				"description": "Combinar todos los filtros disponibles"
			},
			"response": []
		},
		{
			"name": "Filtros - Con Paginación",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"// Validar paginación",
							"pm.test('Pagination structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.pagination).to.have.property('page');",
							"    pm.expect(response.data.pagination).to.have.property('per_page');",
							"    pm.expect(response.data.pagination).to.have.property('total');",
							"    pm.expect(response.data.pagination).to.have.property('total_pages');",
							"    pm.expect(response.data.pagination).to.have.property('has_next');",
							"    pm.expect(response.data.pagination).to.have.property('has_prev');",
							"});",
							"",
							"// Validar parámetros de paginación",
							"pm.test('Pagination parameters', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data.pagination.page).to.eql(1);",
							"    pm.expect(response.data.pagination.per_page).to.eql(5);",
							"});",
							"",
							"console.log('Filtros con paginación verificados exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED&page=1&per_page=5",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar por SKU que contenga 'MED'"
						},
						{
							"key": "page",
							"value": "1",
							"description": "Página 1"
						},
						{
							"key": "per_page",
							"value": "5",
							"description": "5 elementos por página"
						}
					]
				},
				"description": "Filtrar productos con paginación"
			},
			"response": []
		},
		{
			"name": "Filtros - Error Sin Filtros",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about missing filters', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('Debe proporcionar al menos un filtro');",
							"});",
							"",
							"console.log('Error sin filtros verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					]
				},
				"description": "Error al no proporcionar ningún filtro"
			},
			"response": []
		},
		{
			"name": "Filtros - Error Formato Fecha Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about date format', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('formato de \\'expiration_date\\' debe ser YYYY-MM-DD');",
							"});",
							"",
							"console.log('Error formato fecha inválido verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?expiration_date=31-12-2024",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "expiration_date",
							"value": "31-12-2024",
							"description": "Formato de fecha inválido (DD-MM-YYYY)"
						}
					]
				},
				"description": "Error con formato de fecha inválido"
			},
			"response": []
		},
		{
			"name": "Filtros - Error Página Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about invalid page', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('parámetro \\'page\\' debe ser mayor a 0');",
							"});",
							"",
							"console.log('Error página inválida verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED&page=0",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar por SKU que contenga 'MED'"
						},
						{
							"key": "page",
							"value": "0",
							"description": "Página inválida (debe ser ≥ 1)"
						}
					]
				},
				"description": "Error con página inválida (0)"
			},
			"response": []
		},
		{
			"name": "Filtros - Error per_page Inválido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about invalid per_page', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.error).to.include('parámetro \\'per_page\\' debe estar entre 1 y 100');",
							"});",
							"",
							"console.log('Error per_page inválido verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/filter?sku=MED&per_page=150",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"filter"
					],
					"query": [
						{
							"key": "sku",
							"value": "MED",
							"description": "Filtrar por SKU que contenga 'MED'"
						},
						{
							"key": "per_page",
							"value": "150",
							"description": "per_page inválido (debe ser 1-100)"
						}
					]
				},
				"description": "Error con per_page inválido (> 100)"
			},
			"response": []
		},
		{
			"name": "Crear Productos Masivos - Archivo Vacío",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userId",
							"value": "8f1b7d3f-4e3b-4f5e-9b2a-7d2a6b9f1c05",
							"type": "text"
						},
						{
							"key": "file",
							"description": "Archivo CSV con productos a procesar",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/import",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"import"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Historial de cargues masivos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/history",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener Historial de cargues masivos - Página 1 con 5 elementos Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea exitosa",
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Validar que la respuesta sea JSON",
							"pm.test('Response is JSON', function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"// Validar estructura de respuesta",
							"pm.test('Response has success structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('data');",
							"    pm.expect(response.success).to.be.true;",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/history?page=1&per_page=5",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"history"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "per_page",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup - Crear Producto para Agregar Stock",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar SKU en formato MED-#### (4 dígitos)",
							"const random = Math.floor(Math.random() * 9000) + 1000; // 1000-9999",
							"const sku = `MED-${random}`;",
							"pm.environment.set('sku_for_add_stock', sku);",
							"console.log('SKU generado:', sku);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Product created for add stock test', function () {",
							"    pm.response.to.have.status(201);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    ",
							"    // Guardar ID para el test",
							"    pm.environment.set('test_product_id', response.data.id);",
							"    console.log('Producto creado para agregar stock, ID:', response.data.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_for_add_stock}}\",\n    \"name\": \"Producto Test Agregar Stock\",\n    \"description\": \"Producto para test de agregar stock\",\n    \"expiration_date\": \"2025-12-31\",\n    \"quantity\": 10,\n    \"price\": 50.00,\n    \"location\": \"A-01-01\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"{{provider_id_valido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup - Crear Producto para Restar Stock",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar SKU en formato MED-#### (4 dígitos)",
							"const random = Math.floor(Math.random() * 9000) + 1000; // 1000-9999",
							"const sku = `MED-${random}`;",
							"pm.environment.set('sku_for_subtract_stock', sku);",
							"console.log('SKU generado:', sku);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Product created for subtract stock test', function () {",
							"    pm.response.to.have.status(201);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    ",
							"    // Guardar ID para el test",
							"    pm.environment.set('test_product_id_subtract', response.data.id);",
							"    console.log('Producto creado para restar stock, ID:', response.data.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_for_subtract_stock}}\",\n    \"name\": \"Producto Test Restar Stock\",\n    \"description\": \"Producto para test de restar stock\",\n    \"expiration_date\": \"2025-12-31\",\n    \"quantity\": 50,\n    \"price\": 50.00,\n    \"location\": \"A-01-02\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"{{provider_id_valido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Setup - Crear Producto para Test Stock Insuficiente",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar SKU en formato MED-#### (4 dígitos)",
							"const random = Math.floor(Math.random() * 9000) + 1000; // 1000-9999",
							"const sku = `MED-${random}`;",
							"pm.environment.set('sku_for_insufficient_stock', sku);",
							"console.log('SKU generado:', sku);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Product created for insufficient stock test', function () {",
							"    pm.response.to.have.status(201);",
							"    const response = pm.response.json();",
							"    pm.expect(response.success).to.be.true;",
							"    ",
							"    // Guardar ID para el test",
							"    pm.environment.set('test_product_id_insufficient', response.data.id);",
							"    console.log('Producto creado para test stock insuficiente, ID:', response.data.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"sku\": \"{{sku_for_insufficient_stock}}\",\n    \"name\": \"Producto Test Stock Insuficiente\",\n    \"description\": \"Producto con poco stock para test\",\n    \"expiration_date\": \"2025-12-31\",\n    \"quantity\": 5,\n    \"price\": 50.00,\n    \"location\": \"A-01-03\",\n    \"product_type\": \"Seguridad\",\n    \"provider_id\": \"{{provider_id_valido}}\"\n}"
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products"
					]
				}
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Agregar Cantidad",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar cantidad aleatoria para agregar",
							"const quantity = Math.floor(Math.random() * 20) + 5;",
							"pm.environment.set('test_quantity', quantity);",
							"console.log('Cantidad a agregar:', quantity);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test('Stock update data', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('product_id');",
							"    pm.expect(response.data).to.have.property('new_quantity');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"operation\": \"add\",\n    \"quantity\": {{test_quantity}},\n    \"reason\": \"restock\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{test_product_id}}/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{test_product_id}}",
						"stock"
					]
				},
				"description": "Agregar cantidad al stock de un producto"
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Restar Cantidad",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Generar cantidad pequeña aleatoria para restar",
							"const quantity = Math.floor(Math.random() * 5) + 1;",
							"pm.environment.set('test_quantity_subtract', quantity);",
							"console.log('Cantidad a restar:', quantity);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test('Response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('message');",
							"    pm.expect(response.success).to.be.true;",
							"});",
							"",
							"pm.test('Stock update data', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.data).to.have.property('product_id');",
							"    pm.expect(response.data).to.have.property('new_quantity');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"operation\": \"subtract\",\n    \"quantity\": {{test_quantity_subtract}},\n    \"reason\": \"order_fulfillment\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{test_product_id_subtract}}/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{test_product_id_subtract}}",
						"stock"
					]
				},
				"description": "Restar cantidad del stock de un producto"
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Error Producto No Encontrado",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about product not found', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('Producto con ID 99999 no encontrado');",
							"});",
							"",
							"console.log('Error de producto no encontrado verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"operation\": \"add\",\n    \"quantity\": 10,\n    \"reason\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/99999/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"99999",
						"stock"
					]
				},
				"description": "Error cuando el producto no existe"
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Error Stock Insuficiente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 422', function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"pm.test('Error message about insufficient stock', function () {",
							"    const response = pm.response.json();",
							"    const errorText = JSON.stringify(response).toLowerCase();",
							"    pm.expect(errorText).to.include('stock');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"operation\": \"subtract\",\n    \"quantity\": 99999,\n    \"reason\": \"test_insufficient_stock\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{test_product_id_insufficient}}/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{test_product_id_insufficient}}",
						"stock"
					]
				},
				"description": "Error cuando no hay stock suficiente para restar"
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Error Operación Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about invalid operation', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('La operación debe ser \\'add\\' o \\'subtract\\'');",
							"});",
							"",
							"console.log('Error de operación inválida verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"operation\": \"multiply\",\n    \"quantity\": 10,\n    \"reason\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/1/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"1",
						"stock"
					]
				},
				"description": "Error cuando la operación no es válida"
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Error Cantidad Inválida",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about invalid quantity', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('La cantidad debe ser un número mayor a 0');",
							"});",
							"",
							"console.log('Error de cantidad inválida verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"operation\": \"add\",\n    \"quantity\": -5,\n    \"reason\": \"test\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/1/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"1",
						"stock"
					]
				},
				"description": "Error cuando la cantidad es inválida (negativa)"
			},
			"response": []
		},
		{
			"name": "Actualizar Stock - Error Sin JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validar que la respuesta sea de error",
							"pm.test('Status code is 400', function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"// Validar estructura de error",
							"pm.test('Error response structure', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response).to.have.property('success');",
							"    pm.expect(response).to.have.property('error');",
							"    pm.expect(response.success).to.be.false;",
							"});",
							"",
							"// Validar mensaje de error específico",
							"pm.test('Error message about missing JSON', function () {",
							"    const response = pm.response.json();",
							"    pm.expect(response.details).to.include('Se requiere un cuerpo JSON');",
							"});",
							"",
							"console.log('Error de JSON faltante verificado exitosamente');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/1/stock",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"1",
						"stock"
					]
				},
				"description": "Error cuando no se proporciona JSON"
			},
			"response": []
		},
		{
			"name": "Cleanup - Eliminar Producto Test Agregar Stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Cleanup successful or already deleted', function () {",
							"    pm.expect([200, 404, 422]).to.include(pm.response.code);",
							"    console.log('Producto de test agregar stock limpiado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{test_product_id}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{test_product_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cleanup - Eliminar Producto Test Restar Stock",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Cleanup successful or already deleted', function () {",
							"    pm.expect([200, 404, 422]).to.include(pm.response.code);",
							"    console.log('Producto de test restar stock limpiado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{test_product_id_subtract}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{test_product_id_subtract}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cleanup - Eliminar Producto Test Stock Insuficiente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Cleanup successful or already deleted', function () {",
							"    pm.expect([200, 404, 422]).to.include(pm.response.code);",
							"    console.log('Producto de test stock insuficiente limpiado');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{test_product_id_insufficient}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{test_product_id_insufficient}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Limpiar Producto de Prueba",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Verificar si hay un product_id para limpiar",
							"const productId = pm.environment.get('product_id');",
							"if (!productId) {",
							"    console.log('No hay product_id para limpiar, saltando test');",
							"    pm.environment.set('skip_cleanup', 'true');",
							"} else {",
							"    pm.environment.set('skip_cleanup', 'false');",
							"    pm.environment.set('cleanup_product_id', productId);",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Si no hay producto para limpiar, saltar validaciones",
							"if (pm.environment.get('skip_cleanup') === 'true') {",
							"    pm.test('Cleanup skipped (no product to clean)', function () {",
							"        pm.expect(true).to.be.true;",
							"    });",
							"} else {",
							"    // Aceptar tanto 200 (éxito) como 422 (ya eliminado)",
							"    const statusCode = pm.response.code;",
							"    ",
							"    pm.test('Cleanup successful or already cleaned', function () {",
							"        pm.expect([200, 422]).to.include(statusCode);",
							"    });",
							"    ",
							"    if (statusCode === 200) {",
							"        pm.test('Response has success structure', function () {",
							"            const response = pm.response.json();",
							"            pm.expect(response).to.have.property('success');",
							"            pm.expect(response.success).to.be.true;",
							"        });",
							"        console.log('Producto eliminado exitosamente');",
							"    } else if (statusCode === 422) {",
							"        console.log('Producto ya fue eliminado o no existe - OK');",
							"    }",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{auth_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url_local_inventario}}/inventory/products/{{cleanup_product_id}}",
					"host": [
						"{{url_local_inventario}}"
					],
					"path": [
						"inventory",
						"products",
						"{{cleanup_product_id}}"
					]
				},
				"description": "Eliminar el producto de prueba creado dinámicamente"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "url_local_inventario",
			"value": "http://localhost:8082",
			"type": "string"
		}
	]
}